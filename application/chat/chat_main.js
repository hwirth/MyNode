// chat_main.js
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/
// SPIELWIESE - copy(l)eft 2022 - https://spielwiese.centra-dogma.at
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/

const { DEBUG, COLORS, color_log } = require( '../../server/debug.js' );
const { REASONS                  } = require( '../constants.js' );


module.exports = function ChatProtocol (persistent_data) {
	const self = this;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/
// PROTOCOL DEFINITION
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/
/*
	this.commands = {
		kick    : '{ address: <ip>:<port> }',
		login   : '{ username: <user name>, password: <password> }',
		logout  : null,
		status  : null,
	};
*/

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/
// HELPERS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/

	function respond_success (client, command, reason, status = true) {
		client.send({
			session: {
				[command]: {
					success   : status,
					reason    : reason,
				},
			},
		});

	} // respond_success


	function respond_failure (client, command, reason) {
		respond_success( client, command, reason, false );

	} // respond_failure



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/
// REQUEST HANDLERS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/

	this.requestHandlers = {};

	this.requestHandlers.test = function (client, parameters) {
		color_log(
			COLORS.PROTOCOL,
			'<chat.test>',
			client,
		);

		respond_success( client, 'test', 'niy' );

	}; // test


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/
// CONSTRUCTOR
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////119:/

	function init () {
		return Promise.resolve();

	}; // init


	// Initialize the object asynchronously
	// Makes sure, a reference to this instance is returned to  const protocol = await new Protocol();
	init().then( ()=>self );

}; // ChatProtocol


//EOF
