==================================================================================================================119:=
MyNode - copy(l)eft 2022 - spielwiese.central-dogma.at
README Dec 13, 2022 - Some things will likey have changed, since I last updated this file.
==================================================================================================================119:=

Index
	1. Overview
	2. File structure
	3. Mode of operation
		3.1. Messages and session handling
		3.2. Hot code reloading
		3.3. Persistent data
		3.4. Protocols
		3.5. Asynchronicity in object instantiation
	4. Configuration
	5. Installation
	6. TODO
	7. Code parking space


1. Introduction
===============
For a CSS based poker game, I wanted to add multi player capabilities. As it usually goes, the scope of the project
exploded a little and now it has become MyNode, which is a client/server system for applications like a chat or
multi-player games written in NodeJS.

1.1. Client End Point
---------------------
The "CEP" is a fancy self-reconnecting websocket and API to the server functions for the application developer. It
also provides a debug terminal that allows to send manually crafted JSON messages to the server and also serves as
mod/admin interface.

1.1 Main server - ./server/
---------------------------
The main program is the minimum amount of code needed to facilitate hot-code reloading (You press ctrl+s and everything
reinstantiates seamlessly without dropping websocket connections, or the clients are sent reload commands).
The http and websocket servers are part of the main program.

1.2 Protocols - ./application/
------------------------------
	* All hot-reloadable code is considered "application" as far as the main server is concerned.
	* Most programs implement a protocol and provide their services to the CEP directly
	* The core protocols deal with message routing, as well as server, permission, user and account management.

1.3 Payload protocols
---------------------
The actual applications, for instance the demo chat, a specific game server, instant messenger or IRC gateways, etc.


2. Overview
===========
This section describes, what MyNode could potentially become. So far I have only been picking low hanging fruit and
the system is amazingly powerful already. I'd prefer to keep things as simple as they are now, which might be in
conflict with adding certain features in the future.

2.1. "Chat", a demo application - ./client/
-------------------------------------------
This simple chat utilizes the CEP to talk to ./application/chat/* .
The debug terminal and its assets are loaded only, when the user opens it for the first time.


2.2. Client End Point - ./client/cep/
-------------------------------------
Provides a self-reconnecting websocket (AutoWebSocket) and helps match sent requests and received responses.

	const cep = new ClientEndPoint(<arguments>);
	cep.connection.*  The websocket interface: .conncect(), etc.
	cep.dom.*         A few things the experimental features in the terminal use, but are of generic utility,
	                  so we publish them for the main application.
	cep.reload.*      Tools to hot-reload object templates, css files, etc.


2.2.1. MyNode WebSocket Interface
---------------------------------
	See ./client/main.js

2.2.2. Utilities
----------------
	* Asset streaming and caching
	* Device manager for controllers, microphones, cameras, head sets, etc.
	* File upload and dragdop support between browser and a file manager
	* WebRTC voice, video and data streams
	* Hot code reloading

	A simple Events() object
	Events can be "emitted" as you expect, or be "called back": When using  callback , only the most recent event
	listener will be called. This is used for asynchronously retreiving login credentials before socket connect,
	and allows the terminal (or any other additional applet) to provide a login form on their own and "take over"
	the duty of providing login credentials, whenever the websockets aks for them. This is transparent to the main
	application.

2.2.3. Debug terminal
---------------------
	* Displays all messages sent or received through the AutoWebSocket
	* Can send manually crafted JSONs
	* UI for server control protocol
	* UI for user management (edit accounts, kick, ban)
	* Remote access to all internal variables of the server
	* Remote access to all internal variables of every connected client
	* Remote IDE for software development (Currently just a code editor)
	* Remote file manager
	* Testing ground while developing future CEP features


2.3. MyNode Server
------------------

2.3.1 Main program
------------------
	* HTTP and websocket server
	* Code hot-reloader

2.3.2 Core protocols
--------------------
All hot reloadable parts are considered application code, most of which implements an independent "protocol".
The main program in the application directory is the Router, which validates the request, gathers results and sends
them back. It is closely tied to the session and access protocols, and does not publish a protocol itself.

	* application/router.js    Receives message, calls according protocol request handler, sends result back
	* application/meta.js      Gathers information about the code, when it is compiled
	* application/access.js    Permission management for requests based on meta data
	* application/session.js   Session, user and account management
	* application/control.js   Server control debug protocol

2.3.3 Payload protocols
-----------------------
Most of these are not yet implemented, or very rudimentary for testing purposes only.

	* Chat
	* File manager
	* "Remote desktop" from client to client, Synergy like mouse and keyboard sharing
	* RSS, IRC, Email, Forum, GPT chatbot, ...
	* Turn based games (Showdown, Dice Chess, Billiard, Chess, MOO2)
	* Real time games (Dbris, Getaway, VirtuaRacing/Microprose F1 GP, My Little Program, Lightcycle)


3 Debug terminal for JSON messages
----------------------------------


4. File structure
=================
	./start_server.sh            Runs node in a loop, terminates on certain exit codes
	./server/                    Code in this folder cannot be hot-reloaded
	./server/main.js             Web socket, http server, hot reload of application code
	./server/debug.js            Colored logging to stdout, log to file
	./server/config.js           Provides hard coded constants and values from the configuration file
	./server/reloader.js         Hot code-reloading. Reinstantiates the application for each request
	./application/               Hot reloadable code, responses to messages from the websocket
	./application/router.js      Calls response handler according to requested protocol/command
	./application/session.js     Main protocol, handles accounts and logins
	./application/client.js      I want to get rid of its methods and re-integrate it with session.js
	./application/chat/chat.js   Custom server protocol, simple text chat
	./client/                    Chat client and a gamified debug thingy
	./client/index.html
	./client/main.js
	./client/cep/
	./client/cep/cep.js
	./client/cep/websocket.js
	./client/cep/config.js
	./client/cep/events.js       Simple event mechanism.
	./client/cep/dom_assist.js   DOM helpers, find elements, reload CSS, etc.
	./client/cep/helpers.js      Things that are just generally missing in JavaScript, like isNumeric()


5. Mode of operation
====================

3.1. Messages and session handling
----------------------------------
Messages to the websocket are expected to be stringified JSON objects of the following structure:

	{
		"<Protocol name>": {
			"<Command name>": {
				<Command specific arguments>
			}
		}
	}

The "session" protocol is handling logins, accounts and permissions. The client must authenticate before accessing
any further protocols with a message like:

	{
		"session": {
			"login": {
				username: '<username>',
				password: '<password>'
			}
		}
	}

Responses will follow the command structure like:

	{
		"session": {
			"login": {
				<specific response>
			}
		}
	}


3.2. Hot code reloading
-----------------------
The program is split into two parts: Persistent and ephemeral. Websocket events (i.e. onMessage) will first see, if any
modules in ./application/ have changed and will reload them and re-instantiate , before calling the updated actual event handlers contained
in said modules.


3.3. Persistent data
--------------------
The websocket itself is kept alive in the persistent part of the program, only the response handlers are hot reloaded.
Persistent data is stored in the main part as well. Application code will be given a reference to its data on
(re-)creation.


3.4. Protocols
--------------
Each message contains commands for specific protocols. These will be relayed accordingly through  protocols.js .
This allows for independent servers to run over the same websocket. Each protocol implementation will be given a
reference to its respective persistent data, which is stored in  AppReloader.persistentData.<protocol name> .

Some protocols need special callbacks, for instance  triggerExit , which allows a protocol to cause a full restart of
the server. How protocols are created and interconnected is configured by hand in  Protocols.init() .


3.5. Asynchronicity in object instantiation
-------------------------------------------
The whole program is probably to be considered a Singleton object.

[ ] // Initialize the object asynchronously
    // Makes sure, a reference to this instance is returned to  const protocol = await new Protocol();
    self.init().then( ()=>self );   // const chat = await new ChatServer();


3.6. Glue code in the main object
---------------------------------
//... Rephrase this
When sub-objects need to call methods of other objects which also need to call methods of the first object, we can't
just pass the all methods as callbacks when instantiating the first object, because the next one does not exist yet.
Therefore, "relay" functions in the main object are used for instantiation, because we are allowed to code calls for
things that don't yet exist, when the funcion is declared.
//EOF

4. Configuration
================
/etc/spielwiese.conf

RUN_AS_USER           spielwiese
RUN_AS_GROUP          spielwiese
DOCUMENT_ROOT         /.../htdocs

LOG_TO_CONSOLE        true
LOG_TO_FILE           false
LOG_FILE_NAME         /.../spielwiese.log

SSL_PUBLIC_KEY_FILE   /.../spielwiese.crt
SSL_PRIVATE_KEY_FILE  /.../spielwiese.key

HTTPS_PORT            1337
WS_PORT               1337


//EOF
